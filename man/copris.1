.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "COPRIS" "1" "2024\-08\-24" "" "0.9\-716\-gb0269f3\-dirty"
.SH NAME
\f[B]copris\f[R] \- a converting printer server
.SH SYNOPSIS
.PP
\f[B]copris\f[R] [\f[I]options\f[R]] [\f[I]printer device\f[R] or
\f[I]output file\f[R]]
.PD 0
.P
.PD
\f[B]copris\f[R] \f[B]\-\-dump\-commands\f[R] > new_feature_file.ini
.SH DESCRIPTION
COPRIS is a printer server and text conversion program that bridges the
gap between modern, UTF\-8\-encoded, Markdown\-formatted text and
(older) dot\-matrix and thermal printers.
.PP
When provided with the appropriate configuration files and options,
COPRIS reads plain text from a local source or the network (with a
built\-in TCP socket server), applies optional processing methods to it
and sends it to the destination device (or file).
.PP
Two main text processing methods stand out in COPRIS; they are:
.SS Character recoding via encoding files
Older printers usually don\[cq]t support multi\-byte UTF\-8\-encoded
text.
Rather, they use code pages and customised character sets which may vary
between different manufacturers.
COPRIS can load a character \f[I]encoding file\f[R] that is used to
recode received text.
By writing or selecting a premade one for your printer and locale, you
allow COPRIS to recode (replace) received characters with appropriate
locale\-specific ones, understood by your printer.
.PP
This is particulary useful in cases where printer distributors swapped
lesser\-used ASCII characters (such as \f[CR]\[ti] \[at] {\f[R]) with
those from the national alphabet, so they could be typed out directly
from the non\-localised keyboard.
By finding similar\-looking characters in printer\[cq]s character set,
you may, crudely, regain those lost characters.
.PP
However, \f[I]encoding files\f[R] aren\[cq]t tied only to locale
conversions, you may use them to remap any character.
Examples include typographic quotation marks, em dashes, copyright
symbol and others, commonly found in character sets of various printers.
.SS Markdown formatting via printer feature files
Many printers support commands (escape codes) for formatting printed
text (e.g.\ Epson has its ESC/P control language).
COPRIS can read a \f[I]printer feature file\f[R] that specifies such
commands, invoked by following Markdown attributes:
.IP \[bu] 2
bold and italic \f[I]emphasis\f[R] via asterisks (\f[CR]*\f[R],
\f[CR]**\f[R], \f[CR]***\f[R]) or underscores (\f[CR]_\f[R],
\f[CR]__\f[R], \f[CR]___\f[R])
.IP \[bu] 2
up to 4 levels of \f[I]headings\f[R] via number signs (\f[CR]#\f[R],
\f[CR]##\f[R], \f[CR]###\f[R], \f[CR]####\f[R])
.IP \[bu] 2
\f[I]blockquotes\f[R] via greater\-than signs and a space
(\f[CR]>\ \f[R])
.IP \[bu] 2
\f[I]inline code\f[R] via single backticks (\f[CR]\[ga]\f[R])
.IP \[bu] 2
\f[I]code blocks\f[R] via triple backticks (\f[CR]\[ga]\[ga]\[ga]\f[R])
\[en] or four spaces, but those are disabled by default
.IP \[bu] 2
\f[I]links\f[R] via angle brackets (\f[CR]< >\f[R])
.PP
Any command can be bound to mentioned attributes.
If desired, bold emphasis can trigger double\-width text, headings may
change the font face or size and links can be made underlined.
There are no limits, as long as your \f[I]printer feature file\f[R]
contains commands that are understood by the printer (or any other
destination device).
.PP
You might have noticed that only a subset of the Markdown specification
is supported.
COPRIS intentionally doesn\[cq]t alter text layout (white space,
paragraphs etc.), since there\[cq]s no markup/layout engine.
You may freely format your input plain\-text files to your liking, and
COPRIS will preserve the spacing and newlines (just be warned about four
leading spaces triggering a code block).
.SH FILE FORMAT
\f[I]Encoding\f[R] and \f[I]printer feature files\f[R] are expected to
be in the INI file format:
.IP
.EX
\f[I]# Comment\f[R]
key1 = whitespace separated values
key2 = whitespace separated values ; inline comment
\&...
.EE
.PP
Left\-hand keys should be written out directly as UTF\-8 characters or
strings, right\-hand values are expected to be in either decimal, octal
(prefixed by a \f[CR]0\f[R]) or hexadecimal base (prefixed with
\f[CR]0x\f[R]).
Don\[cq]t prepend zeroes to decimal numbers for alignment, as
they\[cq]ll be interpreted as octal numbers.
Instead, use any amount of spaces (or tabulators).
.PP
One line can contain exactly \f[I]one\f[R] definition/command.
.PP
In case you need a \f[CR]key\f[R] to resolve to a blank
\f[CR]value\f[R], set \f[CR]\[at]\f[R] as the value (e.g.\ if you want
to remove certain characters from the text, or omit rendering some
Markdown attributes).
.PP
Here are some examples:
.IP
.EX
Å = 0xC5                ; for an encoding file
F_BOLD_OFF = 0x1B 0x45  ; for a printer feature file
F_H3_ON = \[at]             ; ditto
.EE
.SH THE ENCODING FILE
Before making one, check if COPRIS already includes one for your locale
(\f[CR]encodings\f[R] directory in the source tree).
.PP
The format of an encoding file is as follows.
Start the line by entering your desired character, either via the
keyboard or copied from somewhere else.
Follow by an equals sign.
Then, enter the numerical value of the same character your printer will
understand.
.PP
Here\[cq]s an example excerpt of the YUSCII encoding:
.IP
.EX
\f[I]# Left\-hand letters are readable to us, however, their UTF\-8 codes\f[R]
\f[I]# are unknown to the printer. Therefore, COPRIS replaces them with\f[R]
\f[I]# the right\-hand values, here represented in hexadecimal.\f[R]
Č = 0x5E  ; replacing \[ha]
Ž = 0x40  ; replacing \[at]
Š = 0x7B  ; replacing [
.EE
.PP
You might have noticed that YUSCII overrides some ASCII characters.
Luckily, printer character sets often consist of additional characters
(Greek letters, box drawing and maths symbols etc.), which can be also
specified in an encoding file to imitate the lost ones:
.IP
.EX
\[ha] = 0x27  ; replacement is an acute accent
\[at] = 0xE8  ; replacement is the Greek letter Phi
\&...
.EE
.PP
Have you transcribed a national or a well known encoding COPRIS
doesn\[cq]t yet include?
Contributions are always welcome!
.PP
You may find out that your printer supports a code page, appropriate for
your locale, but it isn\[cq]t selected by default when you turn it on.
Read on, the chapter about printer feature files explains session
commands which can be used for setting up the printer.
.SH THE PRINTER FEATURE FILE
As with encoding files, COPRIS\[cq] source tree might have the right one
in the \f[CR]feature\-files/\f[R] directory.
If the file name seems appropriate, check the first few lines of the
file to see if your printer/use case is supported.
.PP
Else, consult the printer\[cq]s manual.
There should be a section on escape codes.
Generate a sample printer feature file
(\f[CR]copris \-\-dump\-commands > my\-printer.ini\f[R]).
Uncomment the appropriate commands and append values from the manual, in
the same way as with encoding files.
.PP
Example from Epson\[cq]s LX\-300 manual, page A\-14 (91):
.IP
.EX
ASCII   Dec.   Hex.   Description
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
ESC 4   52     34     Select Italic Mode
ESC 5   53     35     Cancel Italic Mode
.EE
.PP
The corresponding printer feature file lines are:
.IP
.EX
\f[I]# lx300.ini\f[R]
F_ITALIC_ON  = 0x1B 0x34  ; hexadecimal notation, 0x1B = ESC
F_ITALIC_OFF = 27 53      ; decimal notation, 27 = ESC
.EE
.SS Variables in printer feature files
You can use existing command names as variables, as long as you define
the command \f[I]before\f[R] using it as a variable.
Furthermore, you may define your own custom variables and use them in
existing commands.
For COPRIS to recognise them, they must be prefixed with \f[CR]C_\f[R]!
Variables may be interweaved with commands.
.PP
Examples:
.IP
.EX
\f[I]# lx300.ini \- continued\f[R]
C_UNDERLINE_ON  = 0x1B 0x2D 0x31
C_UNDERLINE_OFF = 0x1B 0x2D 0x30
F_H1_ON  = C_UNDERLINE_ON F_ITALIC_ON
F_H1_OFF = F_ITALIC_OFF C_UNDERLINE_OFF
.EE
.SS Session commands
COPRIS provides two command pairs for sending repetitive settings to the
printer.
They may be used to set the code page, text margins, line spacing, font
face, character density, initialise/reset the printer and so on:
.IP \[bu] 2
\f[CR]S_AT_STARTUP\f[R] and \f[CR]S_AT_SHUTDOWN\f[R] \- sent to the
printer once after COPRIS starts and once before it exits
.IP \[bu] 2
\f[CR]S_BEFORE_TEXT\f[R] and \f[CR]S_AFTER_TEXT\f[R] \- sent to the
printer each time text is received, in order \f[CR]S_BEFORE_TEXT\f[R] \-
\f[I]received text\f[R] \- \f[CR]S_AFTER_TEXT\f[R]
.PP
Examples:
.IP
.EX
\f[I]# lx300.ini \- continued\f[R]
S_AT_STARTUP = 0x07  ; sound the bell (beeper)
S_AFTER_TEXT = 0x0C  ; trigger form feed after printing
.EE
.SH VARIABLES, NUMERICAL VALUES AND COMMENTS
If you\[cq]ve defined a printer feature file, and it includes custom
variables (prefixed with \f[CR]C_\f[R]), you may use them directly in
input text.
.PP
To allow for that, specify the \f[CR]\-c\f[R] argument when running
COPRIS and begin your text with a line, containing
\f[CR]COPRIS ENABLE\-COMMANDS\f[R].
This is called the \f[I]modeline\f[R] and tells COPRIS to process
variables in input text.
.PP
You may then call variables in the text file by omitting their
\f[CR]C_\f[R] prefix and prepending a dollar sign to them.
I.e., if your variable is \f[CR]C_SERIF\f[R], \f[CR]$SERIF\f[R] should
be used in text.
.PP
Furthermore, apart from already\-defined variables, numerical values can
be included in text.
They must be also be prefixed with a dollar sign and then specified in
decimal, octal or hexadecimal notation, as they would be in a printer
feature file.
.PP
Lastly, comments can be passed in text.
They again consist of a dollar sign, which is then followed by a number
sign and the word that needs to be commented out.
You cannot comment out multiple space\-separated words, only single
words.
To circumvent that, separate them with some other character, such as an
underscore or a non\-breaking space.
.PP
Here are examples of all three notations:
.IP
.EX
COPRIS ENABLE\-COMMANDS     (must be included at the top)
$#\ Reduce\ line\ spacing     (non\-breaking spaces are used in this line)
$ESC $0x33 $25             (feature file has a C_ESC command defined)
.EE
.SS Separating variables from text
COPRIS leaves white space surrounding variables intact when extracting
them from text.
If you\[cq]d like to omit it, terminate consecutive variables with a
semicolon and leave no white space after singular ones:
.IP
.EX
Characters $0x3B $0x3B terminate $0x2E  \->  Characters ; ; terminate .
Characters $0x3B;$0x3B terminate$0x2E   \->  Characters ;; terminate.
.EE
.PP
Note that punctuation can be left adjoined with the command.
If a semicolon is wanted after it being used as a separator, specify it
twice:
.IP
.EX
It sums up to 86 $PERCENT_SIGN.  \->  It sums up to 86 %.
val = $BIT_1;$BIT_0;;            \->  val = 10;
.EE
.PP
Lines with only one variable can be useful for sending configuration
parameters to a printer.
However, the new line they leave behind can be unwanted.
Therefore, terminate such variables with the same symbol they begin
with:
.IP
.EX
\-\-\-
$SERIF   |
text...  | text...
\-\-\-
$SERIF$  | text...
text...  |
\-\-\-
.EE
.PP
You might want to have a variable\-symbol\-prefixed word in your text
without COPRIS complaining it isn\[cq]t defined.
In that case, prefix such word with two dollar symbols.
.SS The modeline
It is expected in the first line of input text when COPRIS is started
with \f[CR]\-c\f[R].
Its format is:
.IP
.EX
COPRIS <required 1st option> [ optional 2nd option ]
.EE
.PP
Previous documentation already mentioned its use for for enabling
variables.
It serves one other purpose, disabling parsing Markdown in text.
.PP
Here are both modeline options and their short forms:
.IP \[bu] 2
\f[CR]ENABLE\-COMMANDS\f[R]; \f[CR]ENABLE\-CMD\f[R]
.IP \[bu] 2
\f[CR]DISABLE\-MARKDOWN\f[R]; \f[CR]DISABLE\-MD\f[R]
.PP
Letters are case\-insensitive and the order of options isn\[cq]t
important.
Thus, following lines are the same:
.IP \[bu] 2
\f[CR]COPRIS ENABLE\-COMMANDS DISABLE\-MARKDOWN\f[R]
.IP \[bu] 2
\f[CR]copris disable\-md enable\-cmd\f[R]
.SH COMMAND LINE OPTIONS
.TP
\f[B]\-p\f[R], \f[B]\-\-port\f[R] \f[I]NUMBER\f[R]
Run COPRIS as a network server on port \f[I]NUMBER\f[R].
Superuser privileges are required if \f[I]NUMBER\f[R] is less than 1024.
.TP
\f[B]\-e\f[R], \f[B]\-\-encoding\f[R] \f[I]FILE\f[R]
Recode characters in received text according to definitions from
encoding \f[I]FILE\f[R].
This option can be specified multiple times.
.TP
\f[B]\-\-ignore\-missing\f[R]
If recoding characters, do not terminate the program if received text
contains any possibly unwanted multi\-byte characters that were not
handled by specified \f[I]FILE\f[R]s.
.TP
\f[B]\-f\f[R], \f[B]\-\-feature\f[R] \f[I]FILE\f[R]
Process Markdown formatting in received text and apply session commands
according to commands from printer feature \f[I]FILE\f[R].
This option can be specified multiple times.
.TP
\f[B]\-c\f[R], \f[B]\-\-parse\-commands\f[R]
If a printer feature file is being used, recognise feature commands in
received text and apply them.
Commands must be prefixed with a predefined symbol, which is shown when
invoking \f[CR]copris \-\-version\f[R].
This feature only works when the \f[I]received text starts with\f[R]
\f[CR]COPRIS ENABLE\-COMMANDS\f[R].
.TP
\f[B]\-\-dump\-commands\f[R]
Show all possible printer feature commands in INI file format (e.g.\ to
be piped into a new printer feature file you are making).
.TP
\f[B]\-d\f[R], \f[B]\-\-daemon\f[R]
If running as a network server, do not exit after the first connection.
.TP
\f[B]\-l\f[R], \f[B]\-\-limit\f[R] \f[I]NUMBER\f[R]
If running as a network server, limit number of received bytes to
\f[I]NUMBER\f[R].
.TP
\f[B]\-\-cutoff\-limit\f[R]
If limit is active, cut text on \f[I]NUMBER\f[R] count instead of
discarding the whole chunk.
.TP
\f[B]\-v\f[R], \f[B]\-\-verbose\f[R]
Show informative status messages.
If specified twice, show even more messages.
.TP
\f[B]\-q\f[R], \f[B]\-\-quiet\f[R]
Do not show any unneccessary messages, except warnings and fatal errors,
routed to \f[I]stderr\f[R].
This also omits \f[I]notes\f[R], shown if COPRIS assumes it is not
invoked properly.
.TP
\f[B]\-h\f[R], \f[B]\-\-help\f[R]
Show a short option summary.
.TP
\f[B]\-V\f[R], \f[B]\-\-version\f[R]
Show program version, author and build\-time options.
.PP
Do not specify a port number if you want to read from standard input.
Likewise, omit the output file to have text echoed out to standard
output (or piped elsewhere).
.SH EXAMPLES OF INVOKING COPRIS
\f[B]Notice:\f[R] COPRIS is in active development.
Some features are still missing, others have not been thoroughly tested
yet.
Command line option arguments may change in future.
Version 1.0 will be tagged when the feature set will be deemed complete.
.PP
Run as a simple server on port 8080, perform no text recoding, output
received data to the serial port and exit after one connection.
Note that superuser privileges are required if the specified port is
smaller than 1024.
.IP
.EX
copris \-p 8080 /dev/ttyS0
.EE
.PP
Serve on port 8080 as a daemon (do not exit after first connection),
recode text using the \f[CR]slovene.ini\f[R] encoding file, limit any
incoming text to a maximum of 100 characters and print received data to
the terminal.
Note that text limit works only when running as a server.
.IP
.EX
copris \-p 8080 \-d \-e slovene.ini \-l 100
.EE
.PP
Read local file \f[CR]font\-showcase.md\f[R] using the printer feature
file \f[CR]epson\-escp.ini\f[R].
Interpret any possible user commands, found in the local file.
Output formatted text to an USB printer interface on the local computer:
.IP
.EX
copris \-f epson\-escp.ini \-c /dev/usb/lp0 < font\-showcase.md
.EE
.SH DEVELOPMENT
COPRIS\[cq] development repository resides at \c
.UR https://github.com/bertronika/copris
.UE \c
\&.
.SH SEE ALSO
\f[B]stty\f[R](1), \f[B]intercopris\f[R](1)
